// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Availibility {
  IN_STORE
  ONLINE
}
model User {
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  id             String         @id @default(uuid())
  email          String         @unique
  refreshToken   String[]
  accessToken    String?
  organizationId String?
  password       String?
  token          String?
  provider       String?
  username       String?
  confirmedAt    DateTime?
  profile        Profile?
  organization   Organization?
  contributors   Contributor[]
  assignTasks    AssignTask[]
  authProviders  AuthProvider[]
}
model Contributor {
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  deletedAt      DateTime?
  id             String              @id @default(uuid())
  role           RoleContributorRole @default(SUPERADMIN)
  userId         String
  user           User                @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  tasks          Task[]
}

enum RoleContributorRole {
  SUPERADMIN
  ADMIN
}
model Profile {
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  id          String    @id @default(uuid())
  firstName   String
  lastName    String?
  address     String?
  phone       String?
  image       String?
  color       String?
  url         String?
  description String?
  birthday    DateTime?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Organization {
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?
  id               String           @id @default(uuid())
  name             String?
  description      String?
  userId           String           @unique
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  contributors     Contributor[]
  tasks            Task[]
  diagnosis        Diagnosis[]
  medications      Medication[]
  animals          Animal[]
  breeds           Breed[]
  treatments       Treatment[]
  breedings        Breeding[]
  checkPregnancies CheckPregnancy[]
  farrowings       Farrowing[]
  weanings         Weaning[]
  gestations       Gestation[]
  deaths           Death[] 
  milkings         Milking[]
  feedings         Feeding[]
  sellings         Selling[]
  financialDetails FinancialDetail[]
  financialMgts    FinancialMgt[]
  locations        Location[]
  assignTasks      AssignTask[]
  statusTask       StatusTask[]        
}
model ContactUs {
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  id          String    @id @default(uuid())
  fullName    String
  email       String
  phone       String?
  subject     String?
  description String?
}
model AuthProvider {
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  id         String    @id @default(uuid())
  email      String?
  name       String?
  providerId String?
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Task {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  title          String
  description    String
  dueDate        DateTime
  status         TaskStatus   @default(TODO)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  contributorId  String
  contributor    Contributor  @relation(fields: [contributorId], references: [id], onDelete: Cascade)
  userCreatedId  String
  assignTasks    AssignTask[]
}

enum TaskStatus {
  TODO
  INPROGRESS
  DONE
}

model AssignTask {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  taskId         String
  task           Task  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId         String
  user           User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}
model StatusTask {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  name           String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}
model Location {
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  id              String    @id @default(uuid())
  squareMeter     Int
  manger          Int
  through         Int
  number          Int?
  type            AnimalType
  productionPhase ProductionPhase
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  animals         Animal[]
}
model Diagnosis {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  name           String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  treatments     Treatment[]
}
model Medication {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  name           String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  treatments     Treatment[]
}
model Breed {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  name           String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  animals        Animal[]
}
model Animal {
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?
  id              String          @id @default(uuid())
  code            String         
  codeFather      String?
  codeMother      String?
  birthday        DateTime?
  weight          Int?
  gender          Gender
  type            AnimalType
  productionPhase ProductionPhase
  electronicCode  String?
  status          AnimalStatus
  locationId      String?
  location        Location?       @relation(fields: [locationId], references: [id], onDelete: Cascade)
  breedId         String?
  breed           Breed?          @relation(fields: [breedId], references: [id], onDelete: Cascade)
  organizationId  String
  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId   String
  death           Death?
  milking         Milking?
  selling         Selling?
  treatments      Treatment[]
  farrowings      Farrowing[]
  weanings        Weaning[]
  gestations      Gestation[]
  feedings        Feeding[]
}

enum Gender {
  MALE
  FEMALE
}

enum AnimalStatus {
  ACTIVE
  DEAD
  SOLD
}

enum AnimalType {
  PIG
  BOVINE
  GOAT
  RABBIT
  POULTRY
  PISCICULTURE
}

enum ProductionPhase {
  GROWTH
  FATTENING
  GESTATION
  LACTATION
  REPRODUCTION
  ISOLATION
  WEANING
}
model Treatment {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  numberOfDose   Int?
  treatmentName  String?
  treatmentDate  DateTime?
  medicationId   String?
  note           String?
  method         MethodTreatment?
  medications    Medication?  @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  diagnosisId    String?
  diagnosis      Diagnosis?   @relation(fields: [diagnosisId], references: [id], onDelete: Cascade)
  animalId       String?
  animal         Animal?      @relation(fields: [animalId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

enum MethodTreatment {
  INJECTION
  ORAL
  NASAL
  FEEDANDWATER
  EYE
}
model Breeding {
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?
  id               String           @id @default(uuid())
  date             DateTime?
  note             String?
  checkStatus      Boolean?         @default(false)
  method           MethodBreeding?
  animalFemaleId   String
  animalMaleId     String
  organizationId   String
  organization     Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId    String
  checkPregnancy   CheckPregnancy[]
}

enum MethodBreeding {
  NATURAL
  INVITRO_FERTILISATION
}

model CheckPregnancy {
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  deletedAt      DateTime?
  id             String               @id @default(uuid())
  date           DateTime?
  note           String?
  animalFemaleId String?
  method         MethodCheckPregnancy?
  result         ResultCheckPregnancy?
  farrowingDate  DateTime?
  organizationId String
  organization   Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  breedingId     String
  breeding       Breeding        @relation(fields: [breedingId], references: [id], onDelete: Cascade)
  userCreatedId  String
  gestation      Gestation[]
}

enum MethodCheckPregnancy {
  BLOOD_TEST
  RECTAL_PALPATION
  OBSERVATION
  ULTRASOUND
}

enum ResultCheckPregnancy {
  EXPOSED
  OPEN
  PREGNANT
}

model Farrowing {
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deletedAt        DateTime?
  id               String         @id @default(uuid())
  note             String?
  litter           Int?
  date             DateTime?
  organizationId   String
  organization     Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId    String
  animalId         String
  animal           Animal         @relation(fields: [animalId], references: [id], onDelete: Cascade)
  weaning         Weaning[]
}
model Weaning {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  note           String?
  litter         Int?
  date           DateTime?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  animalId       String
  animal         Animal    @relation(fields: [animalId], references: [id], onDelete: Cascade)
  farrowingId    String
  farrowing      Farrowing    @relation(fields: [farrowingId], references: [id], onDelete: Cascade)
}
model Gestation {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  animalId       String
  animal         Animal    @relation(fields: [animalId], references: [id], onDelete: Cascade)
  checkPregnancyId  String
  checkPregnancy CheckPregnancy    @relation(fields: [checkPregnancyId], references: [id], onDelete: Cascade)
  note           String?
}
model Death {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  date           DateTime?
  cause          String
  method         MethodDisposal?
  note           String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  animalId       String @unique
  animal         Animal    @relation(fields: [animalId], references: [id], onDelete: Cascade)
}

enum MethodDisposal {
  INCINERATION
  BURRING
  EATING
  SOLD
  OTHER
}
model Milking {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  date           DateTime?
  quantity       Int?
  method         MethodMilking?
  note           String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  animalId       String @unique
  animal         Animal    @relation(fields: [animalId], references: [id], onDelete: Cascade)
}
enum MethodMilking {
  HAND
  MACHINE
}
model Feeding {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  date           DateTime?
  quantity       Int?
  type           FeedType?
  note           String?
  productionPhase ProductionPhase?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  animalId       String
  animal         Animal    @relation(fields: [animalId], references: [id], onDelete: Cascade)
}
enum FeedType {
  FORAGE
  CONCENTRATES
  PROTEINSUPPLIMENTS
  MINERALSUPPLIMENTS
  GREENFORAGECROPS
  FIBERSUPPLIMENTS
  BYPRODUCTS
  SILAGE
}
model Selling {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  date           DateTime?
  price          Int?
  method         sellingMethod?
  note           String?
  soldTo         String?
  phone          String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  animalId       String @unique
  animal         Animal    @relation(fields: [animalId], references: [id], onDelete: Cascade)
}

enum sellingMethod {
  SOCIALMEDIA
  MARKET
  INFARM
  AUCTION
  CONTRACT
  OTHER
}
model FinancialDetail {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  name           String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  financialMgts   FinancialMgt[]
}
model FinancialMgt {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  date           DateTime?
  note           String?
  amount         Int?
  type           financialType?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  financialDetailId String
  financialDetail   FinancialDetail @relation(fields: [financialDetailId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

enum financialType {
  INCOME
  EXPENSE
}