// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?
  id           String       @id @default(uuid())
  name         String       @unique
  price        Float
  sale         Boolean      @default(false)
  availibility Availibility
  reviews      Review[]
  tags         Tag[]
  description  Description?
}

model User {
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  id             String         @id @default(uuid())
  email          String         @unique
  refreshToken   String[]
  accessToken    String?
  organizationId String?
  password       String?
  token          String?
  provider       String?
  username       String?
  confirmedAt    DateTime?
  profile        Profile?
  organization   Organization?
  contributors   Contributor[]
  authProviders  AuthProvider[]
  tasks          Task[]
}

model Contributor {
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  deletedAt      DateTime?
  id             String              @id @default(uuid())
  role           RoleContributorRole @default(SUPERADMIN)
  userId         String
  user           User                @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

enum RoleContributorRole {
  SUPERADMIN
  ADMIN
}

model Profile {
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  id          String    @id @default(uuid())
  firstName   String
  lastName    String?
  address     String?
  phone       String?
  image       String?
  color       String?
  url         String?
  description String?
  birthday    DateTime?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  id           String        @id @default(uuid())
  name         String?
  description  String?
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  contributors Contributor[]
  tasks        Task[]
  diagnosis    Diagnosis[]
  medications  Medication[]
  // treatments    Treatment[]
  animals      Animal[]
  breeds       Breed[]
}

model ContactUs {
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  id          String    @id @default(uuid())
  fullName    String
  email       String
  phone       String?
  subject     String?
  description String?
}

model AuthProvider {
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  id         String    @id @default(uuid())
  email      String?
  name       String?
  providerId String?
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Description {
  deletedAt DateTime?
  id        String    @id @default(uuid())
  content   String
  product   Product   @relation(fields: [productId], references: [id])
  productId String    @unique
}

model Review {
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  rating    Int
  product   Product   @relation(fields: [productId], references: [id])
  productId String
}

model Tag {
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  id        String    @id @default(uuid())
  content   String
  products  Product[]
}

model Task {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  title          String
  description    String
  dueDate        DateTime
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

model AnimalStatus {
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  id        String    @id @default(uuid())
  title     String
  color     String
  animals   Animal[]
}

model Location {
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  id          String    @id @default(uuid())
  squareMeter Int
  manger      Int
  through     Int
  number      Int
  animals     Animal[]
}

model Diagnosis {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  name           String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

model Medication {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  name           String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

model Breed {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  name           String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  animals        Animal[]
}

model Animal {
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?
  id              String          @id @default(uuid())
  code            String?
  codeFather      String?
  codeMother      String?
  birthday        DateTime?
  weight          String
  gender          Gender
  productionPhase ProductionPhase
  electronicCode  String?
  animalStatusId  String
  animalStatus    AnimalStatus    @relation(fields: [animalStatusId], references: [id], onDelete: Cascade)
  locationId      String
  location        Location        @relation(fields: [locationId], references: [id], onDelete: Cascade)
  breedId         String
  breed           Breed           @relation(fields: [breedId], references: [id], onDelete: Cascade)
  organizationId  String
  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId   String
}

enum Gender {
  MALE
  FEMALE
}

enum ProductionPhase {
  GROWTH
  FATTENING
  GESTATION
  LACTATION
  REPRODUCTION
  ISOLATION
  WEANING
}

// model Treatment {
//   createdAt      DateTime     @default(now())
//   updatedAt      DateTime     @updatedAt
//   deletedAt      DateTime?
//   id             String       @id @default(uuid())
//   name           String
//   organizationId String
//   organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
//   userCreatedId  String
// }

enum Availibility {
  IN_STORE
  ONLINE
}
