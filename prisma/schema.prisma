// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  id             String         @id @default(uuid())
  email          String         @unique
  refreshToken   String[]
  accessToken    String?
  organizationId String?
  password       String?
  token          String?
  provider       String?
  username       String?
  confirmedAt    DateTime?
  profile        Profile?
  organization   Organization?
  contributors   Contributor[]
  assignTasks    AssignTask[]
  authProviders  AuthProvider[]
}

model Contributor {
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  deletedAt      DateTime?
  id             String              @id @default(uuid())
  role           RoleContributorRole @default(SUPERADMIN)
  user           User                @relation(fields: [userId], references: [id])
  userId         String
  organizationId String
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  tasks          Task[]
}

enum RoleContributorRole {
  SUPERADMIN
  ADMIN
}

model Profile {
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  id          String    @id @default(uuid())
  firstName   String
  lastName    String?
  address     String?
  phone       String?
  photo       String?
  companyName String?
  occupation  String?
  color       String?
  url         String?
  description String?   @db.Text
  birthday    DateTime?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?
  id               String           @id @default(uuid())
  name             String?
  image            String?
  logo             String?
  description      String?          @db.Text
  userId           String           @unique
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  contributors     Contributor[]
  tasks            Task[]
  animals          Animal[]
  breeds           Breed[]
  treatments       Treatment[]
  breedings        Breeding[]
  checkPregnancies CheckPregnancy[]
  farrowings       Farrowing[]
  weanings         Weaning[]
  gestations       Gestation[]
  deaths           Death[]
  milkings         Milking[]
  feedings         Feeding[]
  sellings         Selling[]
  finances         Finance[]
  locations        Location[]
  assignTasks      AssignTask[]
  account          Account?
  isolations       Isolation[]
  castrations      Castration[]
}

model ContactUs {
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  id          String    @id @default(uuid())
  fullName    String
  email       String
  phone       String?
  subject     String?
  description String?
}

model AuthProvider {
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  id         String    @id @default(uuid())
  email      String?
  name       String?
  providerId String?
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  title          String
  dueDate        DateTime
  status         TaskStatus   @default(TODO)
  description    String       @db.Text
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  contributorId  String
  contributor    Contributor  @relation(fields: [contributorId], references: [id], onDelete: Cascade)
  userCreatedId  String
  assignTasks    AssignTask[]
}

enum TaskStatus {
  TODO
  INPROGRESS
  DONE
}

model AssignTask {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  taskId         String
  task           Task         @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

model Location {
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?
  id              String          @id @default(uuid())
  manger          Int
  through         Int
  number          Int
  type            AnimalType
  squareMeter     Int
  productionPhase ProductionPhase
  organizationId  String
  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId   String
  animals         Animal[]
}

model Breed {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  name           String
  type           AnimalType
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  animals        Animal[]
}

model Animal {
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?
  id              String          @id @default(uuid())
  code            String
  codeFather      String?
  codeMother      String?
  birthday        DateTime?
  weight          Int?
  photo           String?
  gender          Gender
  type            AnimalType
  productionPhase ProductionPhase
  electronicCode  String?
  status          AnimalStatus    @default(ACTIVE)
  locationId      String?
  location        Location?       @relation(fields: [locationId], references: [id], onDelete: Cascade)
  breedId         String?
  breed           Breed?          @relation(fields: [breedId], references: [id], onDelete: Cascade)
  organizationId  String
  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId   String
  death           Death?
  selling         Selling?
  milkings        Milking[]
  treatments      Treatment[]
  farrowings      Farrowing[]
  weanings        Weaning[]
  gestations      Gestation[]
  feedings        Feeding[]
  isolations      Isolation[]
  castration      Castration?
}

enum Gender {
  MALE
  FEMALE
}

enum AnimalStatus {
  ACTIVE
  DEAD
  SOLD
}

enum AnimalType {
  PIG
  BOVINE
  GOAT
  RABBIT
}

enum ProductionPhase {
  GROWTH
  FATTENING
  GESTATION
  LACTATION
  REPRODUCTION
  WEANING
}

model Treatment {
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  id             String           @id @default(uuid())
  name           String?
  date           DateTime?
  note           String?
  dose           Int?
  diagnosis      String
  medication     MedicationTypes?
  method         MethodTreatment?
  animalId       String?
  animal         Animal?          @relation(fields: [animalId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

enum MethodTreatment {
  INJECTION
  ORAL
  NASAL
  FEEDANDWATER
  EYE
}

enum MedicationTypes {
  ANTIBIOTICS
  ANTIPARASITICS
  ANTIFUNGALS
  ANTIVIRALS
  ANTHALMITICS
  COCCIDIOSTATS
  VACCINS
  ANALGESICS
  CORTICOSTEROIDS
  BRONCODILATORS
  PROBIOTICS
  MINERALVITAMINS
  GROWTHPROMOTER
  TROPICALTREATMENTS
  OTHERS
}

model Breeding {
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  id             String           @id @default(uuid())
  date           DateTime?
  note           String?          @db.Text
  method         MethodBreeding?
  checkStatus    Boolean?         @default(false)
  animalFemaleId String
  animalMaleId   String
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  checkPregnancy CheckPregnancy[]
}

enum MethodBreeding {
  NATURAL
  INVITRO_FERTILISATION
}

model CheckPregnancy {
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  deletedAt      DateTime?
  id             String                @id @default(uuid())
  date           DateTime?
  note           String?               @db.Text
  method         MethodCheckPregnancy?
  result         ResultCheckPregnancy?
  animalFemaleId String?
  farrowingDate  DateTime?
  organizationId String
  organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  breedingId     String
  breeding       Breeding              @relation(fields: [breedingId], references: [id], onDelete: Cascade)
  userCreatedId  String
  gestation      Gestation[]
}

enum MethodCheckPregnancy {
  BLOOD_TEST
  RECTAL_PALPATION
  OBSERVATION
  ULTRASOUND
}

enum ResultCheckPregnancy {
  OPEN
  EXPOSED
  PREGNANT
}

model Farrowing {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  note           String?      @db.Text
  date           DateTime?
  litter         Int?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  animalId       String
  animal         Animal       @relation(fields: [animalId], references: [id], onDelete: Cascade)
  weaning        Weaning[]
}

model Weaning {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  note           String?      @db.Text
  litter         Int?
  date           DateTime?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  animalId       String
  animal         Animal       @relation(fields: [animalId], references: [id], onDelete: Cascade)
  farrowingId    String
  farrowing      Farrowing    @relation(fields: [farrowingId], references: [id], onDelete: Cascade)
}

model Gestation {
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deletedAt        DateTime?
  id               String         @id @default(uuid())
  organizationId   String
  organization     Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId    String
  animalId         String
  animal           Animal         @relation(fields: [animalId], references: [id], onDelete: Cascade)
  checkPregnancyId String
  checkPregnancy   CheckPregnancy @relation(fields: [checkPregnancyId], references: [id], onDelete: Cascade)
  note             String?        @db.Text
}

model Death {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  date           DateTime?
  note           String?      @db.Text
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  animalId       String       @unique
  animal         Animal       @relation(fields: [animalId], references: [id], onDelete: Cascade)
}

model Milking {
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  id             String         @id @default(uuid())
  date           DateTime?
  note           String?        @db.Text
  method         MethodMilking?
  quantity       Int?
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  animalId       String         @unique
  animal         Animal         @relation(fields: [animalId], references: [id], onDelete: Cascade)
}

enum MethodMilking {
  HAND
  MACHINE
}

model Feeding {
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  id              String           @id @default(uuid())
  date            DateTime?
  note            String?          @db.Text
  quantity        Int?
  feedType        FeedType
  productionPhase ProductionPhase?
  organizationId  String
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId   String
  animalId        String
  animal          Animal           @relation(fields: [animalId], references: [id], onDelete: Cascade)
}

enum FeedType {
  FORAGES
  CONCENTRATES
  ROUGHAGES
  PROTEINS
  MINERALSALTS
  VITAMINS
  COMPLETEFEED
  FIBERS
  ENERGYSUPPLIMENTS
  BYPRODUCTS
  SYNTHETICADICTIVES
  OTHERS
}

model Selling {
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  id             String         @id @default(uuid())
  date           DateTime?
  price          Int?
  method         sellingMethod?
  note           String?        @db.Text
  soldTo         String?
  phone          String?
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  animalId       String         @unique
  animal         Animal         @relation(fields: [animalId], references: [id], onDelete: Cascade)
}

enum sellingMethod {
  SOCIALMEDIA
  MARKET
  INFARM
  AUCTION
  CONTRACT
  OTHER
}

model Finance {
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  id             String         @id @default(uuid())
  date           DateTime?
  note           String?        @db.Text
  details        String?
  type           financialType?
  amount         Int?
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  accountId      String
  account        Account        @relation(fields: [accountId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

model Account {
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  deletedAt         DateTime?
  id                String       @id @default(uuid())
  incomeAmount      Int?
  expenditureAmount Int?
  organizationId    String       @unique
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId     String
  financialMgts     Finance[]
}

enum financialType {
  INCOME
  EXPENSE
}

model Isolation {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  date           DateTime?
  note           String?      @db.Text
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  animalId       String       @unique
  animal         Animal       @relation(fields: [animalId], references: [id], onDelete: Cascade)
}

model Castration {
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  id             String           @id @default(uuid())
  date           DateTime?
  note           String?          @db.Text
  method         CastrationMethod
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  animalId       String           @unique
  animal         Animal           @relation(fields: [animalId], references: [id], onDelete: Cascade)
}

enum CastrationMethod {
  SURGICAL
  BANDING
  BURDIZZO
  CHEMICAL
  ELECTROCAUTARY
  LASER
  OTHER
}
